# -*- coding: utf-8 -*-
"""Day 34: Project 5 - Data Analysis on Mobile Applications dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NHFTpGvk2ZcurI_K1p7uNDBn6ScJ2b0u

Dataset: https://drive.google.com/file/d/1lGIrooUAGjgNSSfD2C9VrS4Oy3paLTdO/view?usp=sharing

# Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re

"""# Reading the dataset"""

mobile = pd.read_csv('/content/drive/MyDrive/ShapeAI DST 11021 Oct-Jan Batch 2021-22/Datasets/Mobile_Applications.csv')

"""# Data Exploration"""

mobile

mobile.head()

mobile.tail()

mob = mobile.copy()

mob.columns

len(mob.columns)

mob.shape[1]

mob.shape

mob.info()

mob.describe()

mob.isnull().sum()

mob[mob.Type.isna()]

mob.head(2)

# Change the name of the column "App" to "App_Name"
mob.rename(columns = {'App' : 'App_name'}, inplace=True)

mob.columns

# How many categories are there in the Category column
mob.Category.unique()

mob.Category.nunique()

# Find the maximum and minimum rating
mob.Rating.max()

mob.Rating.min()

1-5
1-10
1-100

# Show all the applications whose rating is 19.0
mob[['App_name','Rating']][mob.Rating==19.0]

mob.iloc[10472,:]

# Show the applications w.r.t. their ratings in the descending order
mob.sort_values("Rating",ascending=False)

test_mob = mob.copy()

test_mob.iloc[10472,1:] = test_mob.iloc[10472,1:].shift()

test_mob.iloc[10472,:]

mob.iloc[10472,1:] = mob.iloc[10472,1:].shift()

mob.iloc[10472,:][2]

mob.Rating = mob.Rating.astype('float')

mob.sort_values("Rating",ascending=False)

mob.info()

# Find out the Application name where the Category is NaN
mob[mob.Category.isna()].App_name

mob.iloc[10472,:]

mob.Category.unique()

Life
Made
WI-Fi
Touchscreen
Photo
Frame

Hacklife -> EDUCATION

life Life -> LIFE HACKLIFE

var = mob.iloc[10472][0].upper()

var = var.split()

var

cat = []

for i in var:
  for j,k in zip(mob.App_name, mob.Category):
    if i in j.upper():
      print(f'App: {j} & Category>: {k}')
      cat.append(str(k))

cat

test = pd.DataFrame(cat, columns=['Category'])

test

test.Category.unique()

test.Category.value_counts()

mob.iloc[10472, 1:2] = "PHOTOGRAPHY"

mob.info()

mob.Rating.describe()

mob.Rating.fillna(mob.Rating.mean(), inplace=True)

mob.info()

mob.head(2)

mob.Reviews = mob.Reviews.astype('int')

mob.info()

M -> MB
G -> GB
K -> KB

for i in mob.Size:
  if 'M' or 'K' or 'G' in str(i):
    print(i)

for i in range(len(mob.Installs)):
  if '+' in mob.Installs[i]:
    mob.Installs[i] = re.sub(',|.$', '', mob.Installs[i])

mob.Installs = mob.Installs.astype('int')

mob.info()

mob.Type = mob.Type.replace(np.nan, 'Free')

mob.Type.unique()

# 0 -> Free
# 1 -> Paid

mob.Type = mob.Type.replace(['Free', 'Paid'],[0,1])

mob.head()

mob.info()

mob.Price.unique()

for i in range(len(mob.Price)):
  if '$' in mob.Price[i]:
    mob.Price[i] = re.sub('^.','',mob.Price[i])

mob.Price = mob.Price.astype('float')

mob.info()

mob['Content Rating'].unique()

mob['Content Rating'].nunique()

mob['Content Rating'].value_counts()

mob['Content Rating'] = mob['Content Rating'].replace(['Everyone', 'Teen', 'Mature 17+', 'Everyone 10+', 'Adults only 18+', 'Unrated'],
                                                      [0,1,2,3,4,5])

mob['Content Rating'].value_counts()

mob.info()

mob.Genres

mob['Last Updated']

Day, Month, Year
7      1    2018

mob['Current Ver']

mob['Android Ver']